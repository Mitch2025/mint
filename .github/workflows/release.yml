name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.set-outputs.outputs.version_tag }}
      has-releases: ${{ steps.set-outputs.outputs.has-releases }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update nightly --no-self-update && rustup default nightly
      - name: Install cargo-dist
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.7/cargo-dist-installer.sh | sh
      - name: Determine version tag and create release
        id: set-outputs
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION_TAG="${GITHUB_REF_NAME}"
          else
            METADATA=$(cargo metadata --no-deps --format-version=1)
            VERSION=$(echo "$METADATA" | jq -r '.packages[0].version')
            PACKAGE=$(echo "$METADATA" | jq -r '.packages[0].name')
            VERSION_TAG="${PACKAGE}-v${VERSION}"
          fi

          echo "Using version tag: $VERSION_TAG"
          echo "version_tag=$VERSION_TAG" >> "$GITHUB_OUTPUT"

          cargo dist plan --tag="$VERSION_TAG" --output-format=json > dist-manifest.json
          echo "dist plan ran successfully"
          cat dist-manifest.json

          ANNOUNCEMENT_TITLE=$(jq --raw-output ".announcement_title" dist-manifest.json)
          IS_PRERELEASE=$(jq --raw-output ".announcement_is_prerelease" dist-manifest.json)
          jq --raw-output ".announcement_github_body" dist-manifest.json > new_dist_announcement.md

          gh release create "$VERSION_TAG" --draft --prerelease="$IS_PRERELEASE" --title="$ANNOUNCEMENT_TITLE" --notes-file=new_dist_announcement.md
          echo "created announcement!"

          gh release upload "$VERSION_TAG" dist-manifest.json
          echo "uploaded manifest!"

          HAS_RELEASES=$(jq --raw-output ".releases != null" dist-manifest.json)
          echo "has-releases=$HAS_RELEASES" >> "$GITHUB_OUTPUT"

  upload-artifacts:
    needs: create-release
    if: ${{ needs.create-release.outputs.has-releases == 'true' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            dist-args: --artifacts=local --target=x86_64-unknown-linux-gnu
            install-dist: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/axodotdev/cargo-dist/releases/download/v0.0.7/cargo-dist-installer.sh | sh
          - os: windows-2019
            dist-args: --artifacts=local --target=x86_64-pc-windows-msvc
            install-dist: irm https://github.com/axodotdev/cargo-dist/releases/download/v0.0.7/cargo-dist-installer.ps1 | iex
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update nightly --no-self-update && rustup default nightly
      - name: Install x86_64-pc-windows-gnu target
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: rustup target add x86_64-pc-windows-gnu
      - name: Cache Dependencies
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-dist
        run: ${{ matrix.install-dist }}
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libgtk-3-dev gcc-mingw-w64
      - name: Install packages (MacOS)
        if: runner.os == 'macOS'
        run: |
          NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install mingw-w64
      - name: Run cargo-dist
        run: |
          VERSION_TAG="${{ needs.create-release.outputs.version_tag }}"
          cargo dist build --tag="$VERSION_TAG" --output-format=json ${{ matrix.dist-args }} > dist-manifest.json
          echo "dist ran successfully"
          cat dist-manifest.json

          jq --raw-output ".artifacts[]?.path | select( . != null )" dist-manifest.json > uploads.txt
          echo "uploading..."
          cat uploads.txt
          gh release upload "$VERSION_TAG" $(cat uploads.txt)
          echo "uploaded!"

  publish-release:
    needs: [create-release, upload-artifacts]
    if: ${{ always() && needs.create-release.result == 'success' && (needs.upload-artifacts.result == 'skipped' || needs.upload-artifacts.result == 'success') }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Mark release as non-draft
        run: |
          VERSION_TAG="${{ needs.create-release.outputs.version_tag }}"
          gh release edit "$VERSION_TAG" --draft=false
